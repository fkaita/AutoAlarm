package com.example.simplegyro;

import android.widget.Button;

import java.util.List;

public class SVC {

    private enum Kernel { LINEAR, POLY, RBF, SIGMOID }

    private int nClasses;
    private int nRows;
    private int[] classes;
    private double[][] vectors;
    private double[][] coefficients;
    private double[] intercepts;
    private int[] weights;
    private Kernel kernel;
    private double gamma;
    private double coef0;
    private double degree;

    public SVC (int nClasses, int nRows, double[][] vectors, double[][] coefficients, double[] intercepts, int[] weights, String kernel, double gamma, double coef0, double degree) {
        this.nClasses = nClasses;
        this.classes = new int[nClasses];
        for (int i = 0; i < nClasses; i++) {
            this.classes[i] = i;
        }
        this.nRows = nRows;

        this.vectors = vectors;
        this.coefficients = coefficients;
        this.intercepts = intercepts;
        this.weights = weights;

        this.kernel = Kernel.valueOf(kernel.toUpperCase());
        this.gamma = gamma;
        this.coef0 = coef0;
        this.degree = degree;
    }

    public int predict(double[] features) {

        double[] kernels = new double[vectors.length];
        double kernel;
        switch (this.kernel) {
            case LINEAR:
                // <x,x'>
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = kernel;
                }
                break;
            case POLY:
                // (y<x,x'>+r)^d
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.pow((this.gamma * kernel) + this.coef0, this.degree);
                }
                break;
            case RBF:
                // exp(-y|x-x'|^2)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += Math.pow(this.vectors[i][j] - features[j], 2);
                    }
                    kernels[i] = Math.exp(-this.gamma * kernel);
                }
                break;
            case SIGMOID:
                // tanh(y<x,x'>+r)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.tanh((this.gamma * kernel) + this.coef0);
                }
                break;
        }

        int[] starts = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            if (i != 0) {
                int start = 0;
                for (int j = 0; j < i; j++) {
                    start += this.weights[j];
                }
                starts[i] = start;
            } else {
                starts[0] = 0;
            }
        }

        int[] ends = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            ends[i] = this.weights[i] + starts[i];
        }

        if (this.nClasses == 2) {

            for (int i = 0; i < kernels.length; i++) {
                kernels[i] = -kernels[i];
            }

            double decision = 0.;
            for (int k = starts[1]; k < ends[1]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            for (int k = starts[0]; k < ends[0]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            decision += this.intercepts[0];

            if (decision > 0) {
                return 0;
            }
            return 1;

        }

        double[] decisions = new double[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                double tmp = 0.;
                for (int k = starts[j]; k < ends[j]; k++) {
                    tmp += this.coefficients[i][k] * kernels[k];
                }
                for (int k = starts[i]; k < ends[i]; k++) {
                    tmp += this.coefficients[j - 1][k] * kernels[k];
                }
                decisions[d] = tmp + this.intercepts[d];
                d++;
            }
        }

        int[] votes = new int[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                votes[d] = decisions[d] > 0 ? i : j;
                d++;
            }
        }

        int[] amounts = new int[this.nClasses];
        for (int i = 0, l = votes.length; i < l; i++) {
            amounts[votes[i]] += 1;
        }

        int classVal = -1, classIdx = -1;
        for (int i = 0, l = amounts.length; i < l; i++) {
            if (amounts[i] > classVal) {
                classVal = amounts[i];
                classIdx= i;
            }
        }
        return this.classes[classIdx];

    }

    public static int main(List<String> args) {
        if (args.size() == 30) {

            // Features:
            double[] features = new double[args.size()];
            for (int i = 0, l = args.size(); i < l; i++) {
                features[i] = Double.parseDouble(args.get(i));
            }

            // Parameters:
            double[][] vectors = {{-0.09122766, -0.52599746, 0.76844597, -0.103236414, -0.52373075, 0.7727561, -0.11120916, -0.52384776, 0.76939905, -0.12296133, -0.5383241, 0.75106084, -0.13926554, -0.5477074, 0.7327658, -0.1531568, -0.5578171, 0.70930886, -0.1903163, -0.5748336, 0.64922196, -0.22098988, -0.5636231, 0.62395257, -0.2537338, -0.5546152, 0.5940318, -0.2752805, -0.56183755, 0.5698273}, {-0.12874669, -0.65190613, 0.684401, -0.14649959, -0.64033324, 0.68035257, -0.17206272, -0.6243985, 0.6733958, -0.19422261, -0.60692525, 0.665608, -0.22080389, -0.5855168, 0.64991903, -0.23506843, -0.5766872, 0.6393579, -0.2487857, -0.5686314, 0.62640005, -0.2753591, -0.57692635, 0.60005784, -0.28634444, -0.5804248, 0.58925927, -0.29301557, -0.58844763, 0.5826873}, {-0.086791046, -0.5777732, 0.6940453, -0.086102575, -0.57757443, 0.69439554, -0.085706785, -0.5788819, 0.69350845, -0.08953211, -0.5799034, 0.690938, -0.08952421, -0.58178514, 0.6901124, -0.08789106, -0.5836219, 0.6905546, -0.08598323, -0.5824962, 0.6935402, -0.08290351, -0.5827744, 0.7011027, -0.078954495, -0.57891697, 0.71213096, -0.07905372, -0.5658943, 0.72957706}, {-0.037290093, -0.6616718, 0.67995596, -0.051553316, -0.6544908, 0.68252367, -0.05878325, -0.64699787, 0.6870387, -0.057114273, -0.63662416, 0.6937441, -0.056334827, -0.6242914, 0.7032173, -0.051365502, -0.61872953, 0.7056591, -0.046155564, -0.6122983, 0.70600575, -0.059530526, -0.60106546, 0.6991046, -0.0667312, -0.6032401, 0.692674, -0.06733454, -0.6051797, 0.688201}, {-0.6763046, 0.20076689, -0.24949883, -0.5691949, 0.21718547, -0.2929211, -0.50678015, 0.18643953, -0.21252842, -0.552355, 0.12683891, -0.17775069, -0.5206431, 0.12224055, -0.18118636, -0.53753024, 0.08062715, -0.15799007, -0.54650754, 0.08627291, -0.17571543, -0.53557676, 0.092600755, -0.18885046, -0.53230745, 0.05743657, -0.18284567, -0.53276324, 0.053539343, -0.19937944}, {-0.51645136, 0.37482074, -0.44199792, -0.48265132, 0.34814, -0.4050489, -0.5558848, 0.25411573, -0.30115986, -0.5560117, 0.22971871, -0.27706397, -0.55342937, 0.19753723, -0.2747495, -0.6147663, 0.08329391, -0.18576247, -0.6343234, 0.0447819, -0.14399537, -0.6193588, 0.017474636, -0.12175305, -0.5393477, 0.037131377, -0.09183368, -0.5202456, 0.042070404, -0.027645178}, {-0.1609363, -0.70235384, 0.60273856, -0.17537533, -0.64594597, 0.63085055, -0.19701546, -0.60595524, 0.64692086, -0.21038766, -0.58883196, 0.65490943, -0.21917109, -0.5828578, 0.6584423, -0.19870098, -0.5887179, 0.6684668, -0.19133127, -0.588974, 0.67540574, -0.18344437, -0.5901122, 0.68140525, -0.17106685, -0.59387106, 0.6862395, -0.1726891, -0.5903652, 0.685451}, {-0.06916081, 0.5910535, -0.79957163, -0.06180141, 0.5933765, -0.7993618, 0.0032775495, -0.6232556, 0.7812439, -0.026641583, -0.6417828, 0.7618821, -0.06736564, -0.6515952, 0.7429591, -0.13933538, -0.6356806, 0.71931344, -0.15958846, -0.62788206, 0.71061844, -0.17392488, -0.61554664, 0.7033061, -0.21927084, -0.59284437, 0.6706586, -0.24966444, -0.57356745, 0.6487426}, {-0.19423781, -0.7025517, 0.6319892, -0.1878163, -0.70476794, 0.63569456, -0.1831229, -0.706045, 0.6377685, -0.1825165, -0.70615524, 0.63794035, -0.18033564, -0.7055147, 0.6372219, -0.17318395, -0.7067072, 0.637005, -0.16088162, -0.7078849, 0.6385557, -0.1328202, -0.7040529, 0.6505944, -0.12805866, -0.6981554, 0.656236, -0.123789094, -0.6824486, 0.6680008}, {-0.5311707, 0.01857907, -0.20639466, -0.5328618, 0.009994017, -0.21404065, -0.53673595, 0.01317693, -0.22340748, -0.5460628, 0.024804132, -0.23172371, -0.55333096, 0.033858187, -0.2309303, -0.5619386, 0.047451843, -0.22723444, -0.5713414, 0.07813845, -0.22403315, -0.5776, 0.09250702, -0.2159808, -0.59453285, 0.114541166, -0.21612628, -0.6105468, 0.121644124, -0.2118615}, {-0.53909796, 0.4699284, 0.27554372, -0.5813122, 0.4896756, 0.30500898, -0.590211, 0.4623849, 0.31804243, -0.612178, 0.42430204, 0.31852204, -0.6242593, 0.42024586, 0.26254147, -0.63328624, 0.31681314, 0.03127424, -0.6233507, 0.2591928, -0.09711692, -0.64365363, 0.2472631, -0.18318774, -0.6589914, 0.22088695, -0.22850747, -0.6580946, 0.1478936, -0.2957302}, {-0.18735597, -0.5517821, 0.6829066, -0.16593857, -0.5575411, 0.692958, -0.14720917, -0.57288694, 0.69209033, -0.13272831, -0.5889287, 0.6866637, -0.11214599, -0.60984457, 0.68211114, -0.09540294, -0.6148193, 0.6903846, -0.08359664, -0.6163289, 0.69619143, -0.047266446, -0.63454825, 0.6992028, -0.04232902, -0.6462548, 0.69124955, -0.038912624, -0.65817535, 0.6811976}, {0.6596911, -0.7015587, 0.16935013, 0.65663743, -0.6927887, 0.18602464, 0.6555443, -0.68807673, 0.19625033, 0.65494794, -0.68335587, 0.20570512, 0.655484, -0.67766356, 0.21578294, 0.6553094, -0.67603433, 0.21829626, 0.65690434, -0.6779986, 0.21413544, 0.6577517, -0.6811358, 0.20922083, 0.6610514, -0.68758667, 0.19623971, 0.6622177, -0.68665254, 0.1950006}, {0.18716125, 0.24136059, 0.6500231, 0.18213408, 0.23218498, 0.65468, 0.1780129, 0.20670243, 0.66055536, 0.17358667, 0.19683024, 0.663645, 0.16876084, 0.18999904, 0.66802955, 0.12638272, 0.19380923, 0.69988275, 0.11406246, 0.17921448, 0.7221915, 0.10062779, 0.14202584, 0.7434905, 0.10630656, 0.10167575, 0.7166879, 0.07047516, 0.12585573, 0.7326511}, {-0.20857188, -0.28312615, 0.50459284, -0.21391341, -0.27573282, 0.48812237, -0.13298213, -0.47451392, 0.42563906, -0.15821819, -0.4921625, 0.4002863, -0.1778639, -0.4443971, 0.30506718, -0.15059337, -0.44854027, 0.28665966, -0.1720886, -0.41155794, 0.30086815, -0.1957037, -0.4006974, 0.3355237, -0.20478858, -0.43073046, 0.39031425, -0.20965204, -0.5494936, 0.40319324}, {0.6405229, -0.6730893, 0.2413506, 0.6423223, -0.6831033, 0.22594017, 0.6409244, -0.7025886, 0.20200874, 0.6437161, -0.7053522, 0.19310787, 0.6479428, -0.70400923, 0.18365666, 0.64925647, -0.6961636, 0.19053814, 0.6494821, -0.69643766, 0.1905364, 0.6501942, -0.6989154, 0.18926457, 0.6509508, -0.70112324, 0.18713146, 0.65818465, -0.7037167, 0.17058824}, {0.25954112, 0.07779223, 0.3052084, 0.30554643, 0.07916679, 0.2876951, 0.3056868, 0.0898363, 0.3211633, 0.29561067, 0.09574783, 0.35619727, 0.28967357, 0.10216577, 0.36616457, 0.23522446, 0.09758578, 0.31984025, 0.15652007, 0.08473608, 0.30659503, 0.088671714, -0.00615404, 0.37693915, 0.0791382, -0.057060808, 0.39614075, 0.0786948, -0.07825779, 0.41132802}, {-0.65481716, -0.31407666, 0.1679756, -0.6545334, -0.39773715, 0.20577988, -0.59128803, -0.37665507, 0.2419024, -0.5756509, -0.42601612, 0.18405175, -0.610972, -0.33495313, 0.14764956, -0.632106, -0.22996536, 0.13908033, -0.5918198, -0.15793072, 0.16408673, -0.55038977, -0.19290821, 0.2978752, -0.47264886, 0.010268163, 0.2883769, -0.42807007, 0.09083188, 0.2980811}, {-0.14189252, -0.5801891, 0.3614384, -0.21031345, -0.592002, 0.4415467, -0.14797331, -0.64431465, 0.4240671, -0.1583079, -0.6487714, 0.38980308, -0.23193245, -0.60913825, 0.3505209, -0.294445, -0.5780615, 0.33733258, -0.35555002, -0.56147265, 0.2713358, -0.391851, -0.5080754, 0.25381303, -0.6165891, -0.4047525, 0.2973978, -0.66400677, -0.3456472, 0.24824809}, {0.03766425, -0.09021325, 0.44867226, 0.025240246, -0.08448314, 0.4550482, 0.021005852, -0.06130019, 0.44589198, 0.02183392, -0.06600867, 0.4257776, 0.03376741, -0.079979934, 0.4217816, 0.056431733, -0.037621032, 0.45791304, 0.10755898, -0.020712368, 0.45928285, 0.16155066, 0.015079041, 0.48716223, 0.16585949, 0.008914373, 0.5150744, 0.17397767, -0.038231436, 0.53577596}, {0.21277112, -0.043855533, 0.4968858, 0.24263744, -0.061968923, 0.47107014, 0.30309358, -0.1396641, 0.44384766, 0.3670631, -0.18261983, 0.40533388, 0.43425852, -0.3247231, 0.43152538, 0.469651, -0.37655142, 0.42669433, 0.5172845, -0.46329024, 0.42326325, 0.6230966, -0.5855488, 0.32663348, 0.6255905, -0.58986914, 0.32068276, 0.6160786, -0.5924716, 0.3255796}, {0.66397285, -0.6942975, 0.18988703, 0.6728866, -0.7056404, 0.14642747, 0.67275995, -0.70289385, 0.15078318, 0.6741997, -0.7026859, 0.14827107, 0.67634284, -0.7026186, 0.14552692, 0.67667794, -0.70232856, 0.14615819, 0.67705405, -0.7023723, 0.14607805, 0.67708963, -0.70223445, 0.14729187, 0.6760809, -0.7037695, 0.14677444, 0.67214185, -0.7086749, 0.14294524}, {-0.0025461193, 0.20984809, 0.7269682, -0.21245725, 0.38820434, 0.5177488, -0.33540526, 0.4356242, 0.2842752, -0.38479355, 0.3645529, 0.1804243, -0.35653815, 0.3582165, 0.14748976, -0.31093037, 0.4420823, 0.08727018, -0.2980493, 0.43293038, 0.13419352, -0.26982883, 0.05236485, 0.3447634, -0.24887152, -0.1474871, 0.43968216, -0.23762698, -0.26426995, 0.51226354}};
            double[][] coefficients = {{-1.0, -0.35062303605312434, -1.0, -1.0, -1.0, -0.3002442188676748, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6508672549207991, 1.0}};
            double[] intercepts = {0.48431981100076316};
            int[] weights = {12, 11};

            // Prediction:
            SVC clf = new SVC(2, 2, vectors, coefficients, intercepts, weights, "rbf", 0.03333333333333333, 0.0, 3);
            int estimation = clf.predict(features);
            return estimation;
        }
        return -1;
    }
}